//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppWebReportes.Licenciador {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="RegistroLicencias", ConfigurationName="Licenciador.wsC0nsultCSoapPort")]
    public interface wsC0nsultCSoapPort {
        
        [System.ServiceModel.OperationContractAttribute(Action="RegistroLicenciasaction/AWSC0NSULTC.Execute", ReplyAction="*")]
        AppWebReportes.Licenciador.ExecuteResponse Execute(AppWebReportes.Licenciador.ExecuteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="RegistroLicenciasaction/AWSC0NSULTC.Execute", ReplyAction="*")]
        System.Threading.Tasks.Task<AppWebReportes.Licenciador.ExecuteResponse> ExecuteAsync(AppWebReportes.Licenciador.ExecuteRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecuteRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="wsC0nsultC.Execute", Namespace="RegistroLicencias", Order=0)]
        public AppWebReportes.Licenciador.ExecuteRequestBody Body;
        
        public ExecuteRequest() {
        }
        
        public ExecuteRequest(AppWebReportes.Licenciador.ExecuteRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="RegistroLicencias")]
    public partial class ExecuteRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string T0;
        
        public ExecuteRequestBody() {
        }
        
        public ExecuteRequestBody(string T0) {
            this.T0 = T0;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExecuteResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="wsC0nsultC.ExecuteResponse", Namespace="RegistroLicencias", Order=0)]
        public AppWebReportes.Licenciador.ExecuteResponseBody Body;
        
        public ExecuteResponse() {
        }
        
        public ExecuteResponse(AppWebReportes.Licenciador.ExecuteResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="RegistroLicencias")]
    public partial class ExecuteResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string T1;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string T2;
        
        public ExecuteResponseBody() {
        }
        
        public ExecuteResponseBody(string T1, string T2) {
            this.T1 = T1;
            this.T2 = T2;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsC0nsultCSoapPortChannel : AppWebReportes.Licenciador.wsC0nsultCSoapPort, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsC0nsultCSoapPortClient : System.ServiceModel.ClientBase<AppWebReportes.Licenciador.wsC0nsultCSoapPort>, AppWebReportes.Licenciador.wsC0nsultCSoapPort {
        
        public wsC0nsultCSoapPortClient() {
        }
        
        public wsC0nsultCSoapPortClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wsC0nsultCSoapPortClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsC0nsultCSoapPortClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsC0nsultCSoapPortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AppWebReportes.Licenciador.ExecuteResponse AppWebReportes.Licenciador.wsC0nsultCSoapPort.Execute(AppWebReportes.Licenciador.ExecuteRequest request) {
            return base.Channel.Execute(request);
        }
        
        public string Execute(string T0, out string T2) {
            AppWebReportes.Licenciador.ExecuteRequest inValue = new AppWebReportes.Licenciador.ExecuteRequest();
            inValue.Body = new AppWebReportes.Licenciador.ExecuteRequestBody();
            inValue.Body.T0 = T0;
            AppWebReportes.Licenciador.ExecuteResponse retVal = ((AppWebReportes.Licenciador.wsC0nsultCSoapPort)(this)).Execute(inValue);
            T2 = retVal.Body.T2;
            return retVal.Body.T1;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<AppWebReportes.Licenciador.ExecuteResponse> AppWebReportes.Licenciador.wsC0nsultCSoapPort.ExecuteAsync(AppWebReportes.Licenciador.ExecuteRequest request) {
            return base.Channel.ExecuteAsync(request);
        }
        
        public System.Threading.Tasks.Task<AppWebReportes.Licenciador.ExecuteResponse> ExecuteAsync(string T0) {
            AppWebReportes.Licenciador.ExecuteRequest inValue = new AppWebReportes.Licenciador.ExecuteRequest();
            inValue.Body = new AppWebReportes.Licenciador.ExecuteRequestBody();
            inValue.Body.T0 = T0;
            return ((AppWebReportes.Licenciador.wsC0nsultCSoapPort)(this)).ExecuteAsync(inValue);
        }
    }
}
